function perform_tracking(config)
% PERFORM_TRACKING Helper function to perform tracking for a single camera
%   This function executes the tracking analysis for a single camera using the
%   provided configuration and parameters from parameter files.
%
% Parameters:
%   config: Structure containing tracking configuration for one camera
%       - cam_number: Camera number identifier
%       - ref_data: Reference image data
%       - cur_data: Current image data for tracking
%       - mask: Mask for the region of interest
%       - initial_seed: Initial seed point for tracking
%       - step_number: Step number identifier
%
% Note:
%   All other parameters are loaded from parameter files

tic;

% Get parameters from DIC config
step_parameters = struct(...
    'type', DIC.ncorr.analysis_direction,...
    'radius', DIC.ncorr.subset_radius.tracking,...
    'spacing', DIC.ncorr.subset_spacing,...
    'cutoff_diffnorm', DIC.ncorr.cutoff.tracking,...
    'cutoff_iteration', DIC.ncorr.solver.max_iterations,...
    'total_threads', DIC.ncorr.solver.num_threads,...
    'initial_seed', config{1}.initial_seed,...
    'stepanalysis_params', struct(...
        'enabled', DIC.ncorr.strain_analysis.enabled,...
        'type', DIC.ncorr.strain_analysis.propagation,...
        'auto', DIC.ncorr.strain_analysis.auto_ref_change,...
        'step', DIC.ncorr.strain_analysis.step_ref_change));

% Perform tracking analysis
[h, file_logic] = ncorr_dic_rewrited(...
    'cam_number', config{1}.cam_number,...
    'cam_data_ref', config{1}.ref_data,...
    'cam_data_cur', config{1}.cur_data,...
    'mask', config{1}.mask,...
    'automatic_process', true,...
    'step_param', step_parameters);

% Clean up
if ~file_logic
    close(h.handles_gui.figure);
end
clear('h');

% Report timing
elapsedTime = toc;
fprintf('--> STEP: Ncorr %d done in %1.1fs\n', config{1}.step_number, elapsedTime);
end
