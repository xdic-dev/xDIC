function success = compute_tracking(data_path, dic_path, subject_id, material, trial, stereopair, phase, showvisu, idx_frame_start, idx_frame_end, frame_jump, ref_trial_id, automatic_process, track_id, refmask, initial_seed_point)
    % This function handles the tracking step for each camera
    % It is extracted from stepD_2DDIC.m to enable parallel processing
    % track_id: 1 for first camera, 2 for second camera
    
    % Get parameters from original function
    TRUE_FPS = 50;
    if str2double(cell2mat(regexp(subject_id, '\d+', 'match'))) < 8
        LIMIT_GRAYSCALE = 70;
    else
        LIMIT_GRAYSCALE = 100;
    end
    
    % Ncorr DIC parameters for tracking
    analysis_direction = 'regular';
    subset_radius_ncorr_tracking = 40;
    subset_spacing = 10;
    cutoff_tracking = 1e-5;
    number_iteration_solver = 100;
    number_threads = 1;
    high_strain_analysis = 1;
    seed_propagation = 'seed';
    auto_ref_change = 1;
    step_ref_change = 10;

    % Set up parameters struct
    step_parameters = struct(...
        'type', analysis_direction,...
        'radius', subset_radius_ncorr_tracking,...
        'spacing', subset_spacing,...
        'cutoff_diffnorm', cutoff_tracking,...
        'num_threads', number_threads,...
        'enabled_stepanalysis', high_strain_analysis,...
        'seedpropagation', seed_propagation,...
        'autorefchange', auto_ref_change,...
        'steprefchange', step_ref_change);

    base_parameters = struct(...
        'num_iterations', number_iteration_solver);

    % Read video data and process images
    [cam_first_raw, cam_second_raw, cam_1, cam_2] = import_vid(data_path,...
        'subject', subject_id,...
        'material', material,...
        'trial', trial,...
        'stereopair', stereopair,...
        'phase', phase,...
        'idxstart_set', idx_frame_start,...
        'idxend_set', idx_frame_end,...
        'framejump', frame_jump);

    if strcmp(phase, "slide1")
        cam_first_raw = cam_first_raw(:,:,1:end/2+5);
        cam_second_raw = cam_second_raw(:,:,1:end/2+5);
    end

    % Image saturation
    cam_first_satur = satur(cam_first_raw, 'level', LIMIT_GRAYSCALE);
    cam_second_satur = satur(cam_second_raw, 'level', LIMIT_GRAYSCALE);

    % TRACKING STEP
    step_parameters.initial_seed = initial_seed_point.pw;
    
    if track_id == 1
        [h, file_logic] = ncorr_dic_rewrited('cam_number', cam_1,...
            'cam_data_ref', cam_first_satur(:,:,1),...
            'cam_data_cur', cam_first_satur(:,:,1:end),...
            'mask', refmask,...
            'automatic_process', automatic_process,...
            'step_param', step_parameters,...
            'base_param', base_parameters);
    else
        [h, file_logic] = ncorr_dic_rewrited('cam_number', cam_2,...
            'cam_data_ref', cam_second_satur(:,:,1),...
            'cam_data_cur', cam_second_satur(:,:,2:end),...
            'mask', refmask,...
            'automatic_process', automatic_process,...
            'step_param', step_parameters,...
            'base_param', base_parameters);
    end

    if ~file_logic
        close(h.handles_gui.figure);
    end
    clear('h');
    
    success = file_logic;
end
