function [prep_params] = dic_preparation(varargin)
%% Parse input arguments
p = inputParser;
p.addParameter('baseDataPath',[]);
p.addParameter('baseResultPath',[]);
p.addParameter('subject',[]);
p.addParameter('material',[]);
p.addParameter('trial',[]);
p.addParameter('stereopair',[]);
p.addParameter('phase',[]);
p.addParameter('jump',[]);
p.addParameter('idxstart_set',[]);
p.addParameter('idxend_set',[]);
p.addParameter('showvisu',0);
p.addParameter('savedata',1);
p.addParameter('reftrial_setmanual',[]);
p.addParameter('param_filt_im',[25 300]);
p.addParameter('automatic_process', true);

p.parse(varargin{:});
base_parameters = struct(...
    'baseDataPath', p.Results.baseDataPath,...
    'baseResultPath', p.Results.baseResultPath,...
    'subject', p.Results.subject,...
    'material', p.Results.material,...
    'trial', p.Results.trial,...
    'stereopair', p.Results.stereopair,...
    'phase', p.Results.phase,...
    'jump', p.Results.jump,...
    'idxstart_set', p.Results.idxstart_set,...
    'idxend_set', p.Results.idxend_set,...
    'automatic_process', p.Results.automatic_process, ...
    'reftrial_setmanual', p.Results.reftrial_setmanual, ...
    'param_filt_im', p.Results.param_filt_im, ...
    'savedata', p.Results.savedata, ...
    'showvisu', p.Results.showvisu ...
    );


%% Load DIC parameters
dic_param;

%% Get subject-specific grayscale limit
subject_number = str2double(cell2mat(regexp(base_parameters.subject, '\d+', 'match')));
if subject_number < DIC.LIMIT_GRAYSCALE.threshold
    LIMIT_GRAYSCALE = DIC.LIMIT_GRAYSCALE.early_subjects;
else
    LIMIT_GRAYSCALE = DIC.LIMIT_GRAYSCALE.default;
end

% Get DIC parameters
TRUE_FPS = DIC.TRUE_FPS;
im_filter_mode = DIC.filtering.enabled;

% Get Ncorr parameters
analysis_direction = DIC.ncorr.analysis_direction;
subset_radius_ncorr_tracking = DIC.ncorr.subset_radius.tracking;
subset_radius_ncorr_matching = DIC.ncorr.subset_radius.matching;
subset_spacing = DIC.ncorr.subset_spacing;
cutoff_tracking = DIC.ncorr.cutoff.tracking;
cutoff_matching = DIC.ncorr.cutoff.matching;
number_iteration_solver = DIC.ncorr.solver.max_iterations;
number_threads = DIC.ncorr.solver.num_threads;
high_strain_analysis = DIC.ncorr.strain_analysis.enabled;
seed_propagation = DIC.ncorr.strain_analysis.propagation;
auto_ref_change = DIC.ncorr.strain_analysis.auto_ref_change;
step_ref_change = DIC.ncorr.strain_analysis.step_ref_change;

%% Setup paths and load protocol
outputPath = fullfile(base_parameters.baseResultPath, base_parameters.subject, ...
    base_parameters.material, base_parameters.trial, base_parameters.phase);
if ~exist(outputPath, 'dir')
    mkdir(outputPath);
end

% load protocol
protocolPath = fullfile(fullfile(base_parameters.baseDataPath, "rawdata", ...
    base_parameters.subject, "speckles", base_parameters.material, "protocol", sprintf('*.mat')));
S = dir(protocolPath);
if isempty(S)
    error('Error: Protocol not found.');
end
p = load(fullfile(S.folder, S.name));
protocol = p.cond;

dircond = protocol.table(:,strcmp(protocol.titles,'dir'));
nfcond = cell2mat(protocol.table(:,strcmp(protocol.titles,'nf')));
spdcond = cell2mat(protocol.table(:,strcmp(protocol.titles,'spd')));
repcond = cell2mat(protocol.table(:,strcmp(protocol.titles,'rep')));

% reference trial determination
if (strcmp(base_parameters.phase,"loading") || nfcond(str2double(base_parameters.trial)) == 1)
    reftrial = sprintf("%03d",find(nfcond == 1 & strcmp(dircond,"Ubnf"),1));
elseif strcmp(base_parameters.phase,"slide1") && nfcond(str2double(base_parameters.trial)) == 5
    reftrial = sprintf("%03d",find(nfcond == 5 & strcmp(dircond,"Ubnf"),1));
else
    error('Error: no ref trial assigned');
end

if ~isempty(base_parameters.reftrial_setmanual)
    reftrial = base_parameters.reftrial_setmanual;
end

%% Read and process images
tic;
[cam_first_raw, cam_second_raw, cam_1, cam_2] = import_vid(base_parameters.baseDataPath,...
    'subject', base_parameters.subject,...
    'material', base_parameters.material,...
    'trial', base_parameters.trial,...
    'stereopair', base_parameters.stereopair,...
    'phase', base_parameters.phase,...
    'idxstart_set', base_parameters.idxstart_set,...
    'idxend_set', base_parameters.idxend_set,...
    'framejump', base_parameters.jump);
elapsedTime = toc;
fprintf("reading done in %1.1fs\n", elapsedTime);

% Process phase-specific data
if strcmp(base_parameters.phase, "slide1")
    cam_first_raw = cam_first_raw(:,:,1:end/2+5);
    cam_second_raw = cam_second_raw(:,:,1:end/2+5);
end

% Image saturation
cam_first_satur = satur(cam_first_raw, 'level', LIMIT_GRAYSCALE);
cam_second_satur = satur(cam_second_raw, 'level', LIMIT_GRAYSCALE);

% Image filtering
if im_filter_mode
    [cam_first, gsboundaries] = filter_like_ben(cam_first_satur, 'paramfilt', base_parameters.param_filt_im);
    cam_second = filter_like_ben(cam_second_satur, 'gsbound', gsboundaries, 'paramfilt', base_parameters.param_filt_im);
    fprintf('--> STEP: filtering done\n');
else
    cam_first = cam_first_raw;
    cam_second = cam_second_raw;
    fprintf('--> STEP: raw data used\n');
end

%% Create parameter structures for DIC analysis
step1_parameters = struct(...
    'type', analysis_direction,...
    'radius', subset_radius_ncorr_tracking,...
    'spacing', subset_spacing,...
    'cutoff_diffnorm', cutoff_tracking,...
    'cutoff_iteration', number_iteration_solver,...
    'total_threads', number_threads,...
    'stepanalysis_params', struct(...
        'enabled', high_strain_analysis,...
        'type', seed_propagation,...
        'auto', auto_ref_change,...
        'step', step_ref_change));

step1_2_parameters = struct(...
    'type', analysis_direction,...
    'radius', subset_radius_ncorr_matching,...
    'spacing', subset_spacing,...
    'cutoff_diffnorm', cutoff_matching,...
    'cutoff_iteration', number_iteration_solver,...
    'total_threads', number_threads,...
    'stepanalysis_params', struct(...
        'enabled', high_strain_analysis,...
        'type', seed_propagation,...
        'auto', auto_ref_change,...
        'step', step_ref_change));

%% Save frame information
idxframe = base_parameters.idxstart_set:base_parameters.jump:base_parameters.idxend_set;
actual_fps_meas = TRUE_FPS/base_parameters.jump;

savefileName = fullfile(outputPath, sprintf('dic_info_data_target_pair%d.mat', base_parameters.stereopair));
save(savefileName, 'actual_fps_meas', 'idxframe');

%% Prepare tracking configurations
tracking_configs = {
    struct(...
        'cam_number', cam_1,...
        'ref_data', cam_first(:,:,1),...
        'cur_data', cam_first(:,:,1:end),...
        'step_number', 1 ...
    ), ...
    struct(...
        'cam_number', cam_2,...
        'ref_data', cam_second(:,:,1),...
        'cur_data', cam_second(:,:,2:end),...
        'step_number', 2 ...
    )
};

%% Prepare output structure
roifile = fullfile(base_parameters.baseResultPath, base_parameters.subject, ...
    base_parameters.material, sprintf("REF_MASK_%s_%s_pair%s.mat", ...
    reftrial, base_parameters.phase, base_parameters.stereopair+""));

matchingfile = fullfile(outputPath, ...
    sprintf("MATCHING2%s_pair%s.mat", reftrial, base_parameters.stereopair+""));

seedfile = fullfile(base_parameters.baseResultPath, base_parameters.subject, ...
    base_parameters.material, sprintf("REF_SEED_%s_%s_pair%s.mat", ...
    reftrial, base_parameters.phase, base_parameters.stereopair+""));

prep_params = struct(...
    'base_parameters', base_parameters,...
    'step1_parameters', step1_parameters,...
    'step1_2_parameters', step1_2_parameters,...
    'outputPath', outputPath,...
    'reftrial', reftrial,...
    'cam_data', struct(...
        'first_raw', cam_first_raw,...
        'second_raw', cam_second_raw,...
        'first', cam_first,...
        'second', cam_second,...
        'first_satur', cam_first_satur,...
        'second_satur', cam_second_satur,...
        'cam_1', cam_1,...
        'cam_2', cam_2),...
    'tracking_configs', tracking_configs,...
    'LIMIT_GRAYSCALE', LIMIT_GRAYSCALE,...
    'actual_fps_meas', actual_fps_meas,...
    'idxframe', idxframe, ...
    'roifile', roifile, ...
    'matchingfile', matchingfile, ...
    'seedfile', seedfile ...
    );

% Print summary
fprintf("Trial information summary '%s' %s %s %s\n   > Dir: %s\n   > Force: %dN\n   > Spd: %dmm/s\n   > Rep: %d\n   > REFtrial: '%s'\n   > NbrFr: %d\n   > Frame : %s\n   > Actual FPS : %d\n",...
    base_parameters.trial,...
    base_parameters.phase,...
    base_parameters.material,...
    base_parameters.subject,...
    dircond{str2double(base_parameters.trial)},...
    nfcond(str2double(base_parameters.trial)),...
    spdcond(str2double(base_parameters.trial)),...
    repcond(str2double(base_parameters.trial)),...
    reftrial,...
    size(cam_first,3),...
    mat2str(idxframe),...
    actual_fps_meas);
end
